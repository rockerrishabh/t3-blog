import { Controller, useForm } from "react-hook-form";
import { trpc } from "../../../../utils/trpc";
import { GetServerSideProps } from "next";
import { unstable_getServerSession } from "next-auth";
import { authOptions } from "../../../api/auth/[...nextauth]";
import toast from "react-hot-toast";
import { EditPostInput } from "../../../../server/schema/post.schema";
import { useRouter } from "next/router";
import Head from "next/head";
import Layout from "../../../../components/Layout";
import { useSession } from "next-auth/react";
import ErrorPage from "../../../../components/Error";
import dynamic from "next/dynamic";
import "suneditor/dist/css/suneditor.min.css";

const SunEditor = dynamic(() => import("suneditor-react"), {
  ssr: false,
});

function Edit() {
  const { data: session } = useSession();
  const router = useRouter();
  const utils = trpc.useContext();
  const slug = router.query.slug as string;
  const { data, isLoading, error } = trpc.useQuery(["posts.bySlug", { slug }]);
  const { register, control, handleSubmit, reset } = useForm<EditPostInput>();

  const editPost = trpc.useMutation("posts.edit", {
    async onSuccess() {
      // refetches posts after a post is added
      await utils.invalidateQueries(["posts.bySlug"]);
      await utils.invalidateQueries(["posts.all"]);
      await utils.invalidateQueries(["posts.my-posts"]);
    },
  });

  const onSubmit = async (data: EditPostInput): Promise<void> => {
    try {
      await editPost.mutateAsync(data);
      toast.success("Successfully Edited");
      reset();
      router.push(`/posts/${data.slug}`);
    } catch (error) {
      console.log(error);
      toast.error("Error while Editing...");
    }
  };

  if (isLoading) {
    return <Layout title="- Edit Post">Loading...</Layout>;
  }

  if (error) {
    return (
      <ErrorPage errorTitle="- Page Not Found" pageError={error.message} />
    );
  }

  if (data && session) {
    if (session.user.id !== data.authorId) {
      return (
        <ErrorPage
          errorTitle="- Page Not Found"
          pageError={`This is not your Post`}
        />
      );
    }
    if (session.user.id === data.authorId) {
      return (
        <Layout title="- Edit Post" className="max-w-7xl mx-auto">
          <Head>
            <title>{`T3 Blog - Edit Post`}</title>
            <meta name="description" content="Generated by create-t3-app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>

          <form
            onSubmit={handleSubmit(onSubmit)}
            className="mt-10 space-y-4 flex-col flex"
          >
            <div className="flex space-x-2">
              <label htmlFor="title">Title: </label>

              <Controller
                control={control}
                render={({ field: { onChange, onBlur } }) => (
                  <input
                    defaultValue={data.title}
                    onChange={onChange}
                    onBlur={onBlur}
                    className="rounded-md flex-1 outline-none border border-gray-400 focus:border-0 focus:ring focus:ring-blue-500"
                    name="title"
                    type="text"
                  />
                )}
                name="title"
                defaultValue={data.title}
              />
              <Controller
                control={control}
                render={({ field: { onChange, onBlur } }) => (
                  <input
                    defaultValue={data.slug}
                    onChange={onChange}
                    onBlur={onBlur}
                    type="hidden"
                  />
                )}
                name="id"
                defaultValue={data.id}
              />
            </div>
            <div className="flex space-x-2">
              <label htmlFor="slug">Slug: </label>

              <Controller
                control={control}
                render={({ field: { onChange, onBlur } }) => (
                  <input
                    defaultValue={data.slug}
                    onChange={onChange}
                    onBlur={onBlur}
                    className="rounded-md flex-1 outline-none border border-gray-400 focus:border-0 focus:ring focus:ring-blue-500"
                    name="slug"
                    type="text"
                  />
                )}
                name="slug"
                defaultValue={data.slug}
              />
            </div>
            <div className="flex space-x-2">
              <label htmlFor="featuredImage">Image: </label>

              <Controller
                control={control}
                render={({ field: { onChange, onBlur } }) => (
                  <input
                    defaultValue={data.featuredImage}
                    onChange={onChange}
                    onBlur={onBlur}
                    className="rounded-md flex-1 outline-none border border-gray-400 focus:border-0 focus:ring focus:ring-blue-500"
                    name="featuredImage"
                    type="text"
                  />
                )}
                name="featuredImage"
                defaultValue={data.featuredImage}
              />
            </div>
            <div className="flex space-x-2">
              <label htmlFor="body">Body: </label>

              <Controller
                control={control}
                render={({ field: { onChange, onBlur } }) => (
                  <SunEditor
                    defaultValue={data.body}
                    onChange={onChange} // send value to hook form
                    onBlur={onBlur}
                    name="body" // notify when input is touched
                    setOptions={{
                      height: "100%",
                      width: "100%",
                      attributesWhitelist: {
                        all: "style",
                      },
                      buttonList: [
                        // Default
                        ["undo", "redo"],
                        ["font", "fontSize", "formatBlock"],
                        ["paragraphStyle", "blockquote"],
                        [
                          "bold",
                          "underline",
                          "italic",
                          "strike",
                          "subscript",
                          "superscript",
                        ],
                        ["fontColor", "hiliteColor", "textStyle"],
                        ["removeFormat"],
                        ["outdent", "indent"],
                        ["align", "horizontalRule", "list", "lineHeight"],
                        ["table", "link", "image", "video", "audio"],
                        ["fullScreen", "showBlocks", "codeView"],
                        ["preview", "print"],
                      ], // Or Array of button list, eg. [['font', 'align'], ['image']]
                      // plugins: [font] set plugins, all plugins are set by default
                      // Other option
                      imageFileInput: false,
                    }}
                  />
                )}
                name="body"
                defaultValue={data.body}
              />
            </div>
            <button
              className="rounded-md text-white hover:bg-blue-400 bg-blue-500 py-3"
              type="submit"
            >
              Submit
            </button>
          </form>
        </Layout>
      );
    }
  }
  return null;
}

export default Edit;

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await unstable_getServerSession(
    context.req,
    context.res,
    authOptions
  );

  if (!session) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }
  return {
    props: { session },
  };
};

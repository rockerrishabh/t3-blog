import { useForm } from "react-hook-form";
import { trpc } from "../../../utils/trpc";
import { GetServerSideProps } from "next";
import { unstable_getServerSession } from "next-auth";
import { authOptions } from "../../api/auth/[...nextauth]";
import toast from "react-hot-toast";
import { EditPostInput } from "../../../server/schema/post.schema";
import { useRouter } from "next/router";
import ErrorPage from "../../404";
import Head from "next/head";
import Layout from "../../../components/Layout";
import { useSession } from "next-auth/react";

function Edit() {
  const router = useRouter();
  const slug = router.query.slug as string;
  const { data: session } = useSession();
  const { data, isLoading, error } = trpc.useQuery(["posts.bySlug", { slug }]);
  const utils = trpc.useContext();
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm<EditPostInput>();

  const editPost = trpc.useMutation("posts.edit", {
    async onSuccess() {
      // refetches posts after a post is added
      await utils.invalidateQueries(["posts.bySlug"]);
      await utils.invalidateQueries(["posts.all"]);
      await utils.invalidateQueries(["posts.my-posts"]);
    },
  });

  const onSubmit = async (data: EditPostInput): Promise<void> => {
    try {
      await editPost.mutateAsync(data);
      toast.success("Successfully Edited");
      reset();
      router.push("/my-posts");
    } catch (error) {
      console.log(error);
      toast.error("Error while Editing...");
    }
  };

  if (isLoading) {
    return <p>Loading...</p>;
  }

  if (error) {
    return <ErrorPage />;
  }

  if (data) {
    return (
      <Layout title="Blog - Edit Post" className="max-w-7xl mx-auto">
        <Head>
          <title>{`T3 Blog - Edit Post`}</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        {session?.user.id === data.authorId && (
          <form
            onSubmit={handleSubmit(onSubmit)}
            className="mt-10 space-y-4 justify-center flex-col flex items-center"
          >
            <div className="flex space-x-2">
              <label htmlFor="title">Title: </label>
              <div className="flex flex-col space-y-2">
                <input
                  {...register("title", { required: true, maxLength: 256 })}
                  className="rounded-md outline-none border border-gray-400 focus:border-0 focus:ring focus:ring-blue-500"
                  defaultValue={data.title}
                  name="title"
                  type="text"
                />
                <input
                  {...register("id", { required: true, maxLength: 256 })}
                  className="rounded-md outline-none border border-gray-400 focus:border-0 focus:ring focus:ring-blue-500"
                  defaultValue={data.id}
                  name="title"
                  type="hidden"
                />
                {errors.title?.type === "required" && (
                  <span className="text-red-500">This field is required</span>
                )}
                {errors.title?.type === "maxLength" && (
                  <span className="text-red-500">Max length is 256</span>
                )}
              </div>
            </div>
            <div className="flex space-x-2">
              <label htmlFor="slug">Slug: </label>
              <div className="flex flex-col space-y-2">
                <input
                  {...register("slug", { required: true, maxLength: 256 })}
                  className="rounded-md outline-none border border-gray-400 focus:border-0 focus:ring focus:ring-blue-500"
                  defaultValue={data.slug}
                  name="slug"
                  type="text"
                />
                {errors.slug?.type === "required" && (
                  <span className="text-red-500">This field is required</span>
                )}
                {errors.slug?.type === "maxLength" && (
                  <span className="text-red-500">Max length is 256</span>
                )}
              </div>
            </div>
            <div className="flex space-x-2">
              <label htmlFor="featuredImage">Featured Image URL: </label>
              <div className="flex flex-col space-y-2">
                <input
                  {...register("featuredImage", {
                    required: true,
                    maxLength: 256,
                  })}
                  className="rounded-md outline-none border border-gray-400 focus:border-0 focus:ring focus:ring-blue-500"
                  defaultValue={data.featuredImage}
                  name="featuredImage"
                  type="text"
                />
                {errors.featuredImage?.type === "required" && (
                  <span className="text-red-500">This field is required</span>
                )}
                {errors.featuredImage?.type === "maxLength" && (
                  <span className="text-red-500">Max length is 256</span>
                )}
              </div>
            </div>
            <div className="flex space-x-2">
              <label htmlFor="body">Body: </label>
              <div className="flex flex-col space-y-2">
                <textarea
                  {...register("body", { required: true, minLength: 50 })}
                  className="rounded-md outline-none border border-gray-400 focus:border-0 focus:ring focus:ring-blue-500"
                  defaultValue={data.body}
                  name="body"
                />
                {errors.body?.type === "required" && (
                  <span className="text-red-500">This field is required</span>
                )}
                {errors.body?.type === "minLength" && (
                  <span className="text-red-500">Minimum length is 10</span>
                )}
              </div>
            </div>
            <button type="submit">Submit</button>
          </form>
        )}
        This Post is not yours to edit. Please Signin with email address{" "}
        {data.author.email}
      </Layout>
    );
  }
  return null;
}

export default Edit;

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await unstable_getServerSession(
    context.req,
    context.res,
    authOptions
  );

  if (!session) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }
  return {
    props: { session },
  };
};
